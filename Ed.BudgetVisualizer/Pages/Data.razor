@page "/data"

@inject Ed.BudgetVisualizer.Logic.IParser Parser
@inject LocalStorage Storage
@inject HttpClient Http

<h1>Data</h1>

<div class="input-group mb-3">
    <div class="custom-file">
        <InputFile OnChange="OnFileSelection" UnmatchedParameters="inputFileParameters" />
        <label class="custom-file-label">Choose a CSV file to import transactions from</label>
    </div>
    <div class="input-group-append">
        <button type="button" class="btn btn-danger" @onclick="OnClearStorage">Clear Storage</button>
    </div>
    @if (Transactions != null && Transactions.Any())
    {
        <div class="input-group-append">
            <button type="button" class="btn btn-success" @onclick="OnRefreshCategories">Refresh Categories</button>
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(status))
{
    <div class="alert alert-success" role="alert">
        @status
    </div>
}

@if (Transactions != null && Transactions.Any())
{
    <div class="alert alert-info" role="alert">
        Storage contains @Transactions.Count transaction(s).
    </div>

    <table class="table transactions">
        <thead>
            <tr>
                <th scope="col">Date</th>
                <th scope="col">Credit/Debit</th>
                <th scope="col">Sum</th>
                <th scope="col">Origin</th>
                <th scope="col">Description</th>
                <th scope="col">Category</th>
                <th scope="col"><span class="oi oi-ban"></span></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in Transactions)
            {
                <tr class="@GetTransactionClass(t.Sum)">
                    <th scope="row">@t.Date.ToShortDateString()</th>
                    <td>@(t.IsCredit ? "C" : "D")</td>
                    <td class="nobreak">@t.Currency @t.Sum.ToString("N2")</td>
                    <td>@t.Origin</td>
                    <td>@t.Description</td>
                    <td>@t.Category</td>
                    <td>
                        <div class="form-check form-check-inline">
                            <input type="checkbox" class="form-check-input position-static" checked="@t.IsExcluded" @onchange="async () => await OnToggleExcluded(t)" />
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string status;
    private string key = "transactions";
    private List<Transaction> Transactions;

    /// <summary>
    /// Additional parameters for the file upload control.
    /// </summary>
    private Dictionary<string, object> inputFileParameters = new Dictionary<string, object>
{
        { "class", "custom-file-input" },
        { "multiple", "true" }
    };

    /// <summary>
    /// Handles the component initialization event.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Load already stored transactions
        Transactions = await Storage.GetItem<List<Transaction>>(key);

        // If there aren't any, initialize the storage
        if (Transactions == null)
        {
            await Storage.SetItem<List<Transaction>>(key, new List<Transaction>());
            Transactions = await Storage.GetItem<List<Transaction>>(key);
        }
    }

    /// <summary>
    /// Handles the file selection event.
    /// </summary>
    /// <param name="files">List of selected files.</param>
    private async Task OnFileSelection(IFileListEntry[] files)
    {
        int parsedTransactionCount = 0;
        List<Category> categories = await Http.GetJsonAsync<List<Category>>("data/categories.json");

        foreach (var file in files)
        {
            // TODO: Support more CSV formats
            List<Transaction> parsedTransactions = await Parser.ParseFile(file.Data);
            if (parsedTransactions.Any())
            {
                Parser.UpdateTransactionCategories(parsedTransactions, categories);
                Transactions.AddRange(parsedTransactions);
                parsedTransactionCount += parsedTransactions.Count;
            }
        }

        if (parsedTransactionCount > 0)
        {
            await Storage.SetItem<List<Transaction>>(key, Transactions);
        }

        status = $"Imported {parsedTransactionCount} transaction(s) from {files.Count()} file(s).";
    }

    /// <summary>
    /// Handles transacrion exclusion toggle event.
    /// </summary>
    /// <param name="transaction">The transaction to toggle.</param>
    private async Task OnToggleExcluded(Transaction transaction)
    {
        transaction.IsExcluded = !transaction.IsExcluded;
        await Storage.SetItem<List<Transaction>>(key, Transactions);
    }

    /// <summary>
    /// Clears the stored transactions.
    /// </summary>
    private async Task OnClearStorage()
    {
        await Storage.SetItem<List<Transaction>>(key, new List<Transaction>());
        Transactions = await Storage.GetItem<List<Transaction>>(key);
        status = "Storage cleared.";
    }

    /// <summary>
    /// Gets a Bootstrap class to use for the transaction row depending on the sum.
    /// </summary>
    /// <param name="sum">The transaction sum.</param>
    private string GetTransactionClass(decimal sum)
    {
        // TODO: Make this more dynamic or configurable

        if (sum > 100)
        {
            return "table-danger";
        }

        if (sum > 50)
        {
            return "table-warning";
        }

        return string.Empty;
    }

    /// <summary>
    /// Refreshes the transaction categories.
    /// </summary>
    private async Task OnRefreshCategories()
    {
        List<Category> categories = await Http.GetJsonAsync<List<Category>>("data/categories.json");
        Parser.UpdateTransactionCategories(Transactions, categories);
        await Storage.SetItem<List<Transaction>>(key, Transactions);
        status = $"Categories refreshed. App had {categories.Count} category filters in the database.";
    }
}
